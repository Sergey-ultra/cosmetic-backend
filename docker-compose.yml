version: "3"
services:

  #Nginx Service
  nginx:
    image: nginx:alpine
    container_name: ${APP_NAME}_nginx
    restart: unless-stopped
    tty: true
    environment:
      - VIRTUAL_PORT=8000
      - VIRTUAL_HOST=smart-beautiful.local
    ports:
      - "8010:80"
    links:
      - app
    volumes:
      - ./:/var/www
      - ./docker/nginx/conf.d/app.conf:/etc/nginx/conf.d/default.conf:rw
      - ./docker/logs/nginx:/var/logs/nginx:rw
    networks:
      - cosmetic



  #PHP Service
  app:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: ${APP_NAME}_php
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    links:
#      - postgres
      - redis
    volumes:
      - ./:/var/www
      - ./docker/php/conf/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - cosmetic


  #MySQL Service
  db:
      image: mysql:8.0.32
      container_name: ${APP_NAME}_mysql
      restart: unless-stopped
      tty: true
      ports:
          - "3316:3306"
      environment:
          MYSQL_ROOT_PASSWORD:
          MYSQL_ALLOW_EMPTY_PASSWORD: 1
          MYSQL_DATABASE: ${DB_DATABASE}
          MYSQL_PASSWORD: ${DB_PASSWORD}
          SERVICE_TAGS: dev
          SERVICE_NAME: mysql
      volumes:
         - ./docker/mysql:/docker-entrypoint-initdb.d
      networks:
         - cosmetic

# docker exec -i db mysql -uroot -proot "$local_db_name" < "$db_file"
# docker exec -i SmartAndBeautiful_mysql mysql -uroot -proot sanctum < sanctum_2024_03_23.sql

  postgres:
      image: postgres:15-alpine
      container_name: ${APP_NAME}_postgres
      restart: unless-stopped
      tty: true
      ports:
          - "5439:5432"
      environment:
          - POSTGRES_DB=${DB_PGSQL_DATABASE}
          - POSTGRES_USER=${DB_PGSQL_USERNAME}
          - POSTGRES_PASSWORD=${DB_PGSQL_PASSWORD}
      volumes:
          - ./docker/postgres:/var/lib/postgresql
          - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      healthcheck:
          test: [ "CMD-SHELL", "pg_isready -d $${DB_PGSQL_DATABASE} -U $${DB_PGSQL_USERNAME}" ]
          interval: 10s
          timeout: 5s
          retries: 5
      networks:
          - cosmetic


#  #Postgres Service
#  postgres:
#    image: postgres:13-alpine
#    container_name: ${APP_NAME}_postgres
#    restart: unless-stopped
#    tty: true
#    ports:
#      - "5432:5432"
#    environment:
#      - POSTGRES_USER=${DB_USERNAME}
#      - POSTGRES_PASSWORD=${DB_PASSWORD}
#      - POSTGRES_DB=${DB_DATABASE}
#      - POSTGRES_HOST_AUTH_METHOD=trust
#    networks:
#      - cosmetic



  #Redis Service
  redis:
    image: redis:alpine
    ports:
      - "6380:6379"
    container_name: ${APP_NAME}_redis
    networks:
       - cosmetic


#Docker Networks


networks:
  cosmetic:
    driver: bridge


